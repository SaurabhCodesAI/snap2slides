"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/gemini-vision/route";
exports.ids = ["app/api/gemini-vision/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgemini-vision%2Froute&page=%2Fapi%2Fgemini-vision%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgemini-vision%2Froute.ts&appDir=D%3A%5Csnap2slides%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csnap2slides&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgemini-vision%2Froute&page=%2Fapi%2Fgemini-vision%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgemini-vision%2Froute.ts&appDir=D%3A%5Csnap2slides%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csnap2slides&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_snap2slides_app_api_gemini_vision_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/gemini-vision/route.ts */ \"(rsc)/./app/api/gemini-vision/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/gemini-vision/route\",\n        pathname: \"/api/gemini-vision\",\n        filename: \"route\",\n        bundlePath: \"app/api/gemini-vision/route\"\n    },\n    resolvedPagePath: \"D:\\\\snap2slides\\\\app\\\\api\\\\gemini-vision\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_snap2slides_app_api_gemini_vision_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/gemini-vision/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW1pbmktdmlzaW9uJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnZW1pbmktdmlzaW9uJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ2VtaW5pLXZpc2lvbiUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDc25hcDJzbGlkZXMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNzbmFwMnNsaWRlcyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NuYXAyc2xpZGVzLXByby8/YzA4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxzbmFwMnNsaWRlc1xcXFxhcHBcXFxcYXBpXFxcXGdlbWluaS12aXNpb25cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbWluaS12aXNpb24vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9nZW1pbmktdmlzaW9uXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW1pbmktdmlzaW9uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcc25hcDJzbGlkZXNcXFxcYXBwXFxcXGFwaVxcXFxnZW1pbmktdmlzaW9uXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9nZW1pbmktdmlzaW9uL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgemini-vision%2Froute&page=%2Fapi%2Fgemini-vision%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgemini-vision%2Froute.ts&appDir=D%3A%5Csnap2slides%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csnap2slides&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/gemini-vision/route.ts":
/*!****************************************!*\
  !*** ./app/api/gemini-vision/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_api_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/api-manager */ \"(rsc)/./lib/api-manager.ts\");\n\n\n// CORS headers for mobile network access\nfunction addCorsHeaders(response) {\n    response.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n    response.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n    response.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\n    return response;\n}\n// Handle preflight requests\nasync function OPTIONS() {\n    return addCorsHeaders(new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200\n    }));\n}\n// Performance optimization: Cache supported file types\nconst SUPPORTED_TYPES = Object.freeze([\n    \"image/\",\n    \"application/pdf\",\n    \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n    \"application/vnd.ms-powerpoint\",\n    \"text/\",\n    \"application/msword\",\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n]);\nconst MAX_FILE_SIZE = 50 * 1024 * 1024; // 50MB constant\nconst REQUEST_TIMEOUT = 300000; // 5 minutes constant\nasync function POST(request) {\n    const startTime = performance.now();\n    let timeoutId;\n    try {\n        // Set timeout for large file processing (5 minutes for large files)\n        const controller = new AbortController();\n        timeoutId = setTimeout(()=>controller.abort(), REQUEST_TIMEOUT);\n        const formData = await request.formData();\n        const file = formData.get(\"file\") || formData.get(\"image\");\n        if (!file) {\n            const errorResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No file provided\"\n            }, {\n                status: 400\n            });\n            return addCorsHeaders(errorResponse);\n        }\n        // Optimized file type validation using cached constants\n        const isValidType = SUPPORTED_TYPES.some((type)=>file.type.startsWith(type) || file.type === type);\n        if (!isValidType) {\n            const errorResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"File type not supported. Please upload images, PDFs, PowerPoint files, or text documents.\"\n            }, {\n                status: 400\n            });\n            return addCorsHeaders(errorResponse);\n        }\n        // Optimized file size validation\n        if (file.size > MAX_FILE_SIZE) {\n            const errorResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"File size must be less than 50MB\"\n            }, {\n                status: 400\n            });\n            return addCorsHeaders(errorResponse);\n        }\n        // Convert file to base64\n        const bytes = await file.arrayBuffer();\n        const base64 = Buffer.from(bytes).toString(\"base64\");\n        // Enhanced prompt for actual content extraction and slide generation\n        const prompt = `Analyze this image/document and extract ALL ACTUAL CONTENT to create valuable slides with REAL information.\r\n\r\nMANDATORY EXTRACTION RULES:\r\n1. EXTRACT EVERY VISIBLE WORD - Read all text exactly as written in the document\r\n2. NO PLACEHOLDER CONTENT - Use only actual content found in the document\r\n3. IF NO CONTENT EXISTS for a section, write \"No [topic] content found in document\"\r\n4. NEVER USE \"(Not applicable)\" - Use actual extracted content or state content is missing\r\n\r\nEXTRACTION PROCESS:\r\nStep 1: READ ALL TEXT word-for-word from the document\r\nStep 2: IDENTIFY all numbers, dates, names, amounts, percentages\r\nStep 3: EXTRACT all visual data from charts, tables, graphs\r\nStep 4: CREATE slides using ONLY the actual extracted content\r\n\r\nFORMAT RESPONSE AS:\r\n\r\nDOCUMENT TYPE: [What type of document this actually is]\r\n\r\nEXTRACTED TEXT CONTENT:\r\n[Write out EVERY word visible in the document exactly as shown]\r\n[Include headers, body text, captions, footnotes, table data]\r\n[Preserve numbers, dates, names, amounts exactly]\r\n\r\nVISUAL ELEMENTS:\r\n[Describe any charts, graphs, tables with their actual data values]\r\n\r\nACTUAL CONTENT SLIDES:\r\n\r\nSlide 1: Document Overview\r\n- Title: [Exact title from document or \"Untitled document\"]\r\n- Type: [Actual document type identified]\r\n- Main content: [Primary subject matter based on extracted text]\r\n- Key elements: [Actual important elements found]\r\n\r\nSlide 2: All Extracted Text\r\n- Complete text content: [All visible text organized by paragraphs]\r\n- Headers/sections: [Actual section titles found]\r\n- Important statements: [Key sentences from document]\r\n- Forms/data fields: [Any structured data found]\r\n\r\nSlide 3: Numbers & Data Points\r\n- Financial amounts: [Actual dollar amounts, costs, prices found]\r\n- Percentages: [Actual percentage values from document]\r\n- Quantities: [Numbers, measurements, counts found]\r\n- Dates: [Actual dates mentioned in document]\r\n\r\nSlide 4: Names & People\r\n- Individual names: [Actual person names in document]\r\n- Organizations: [Company/organization names found]\r\n- Contact info: [Phone numbers, emails, addresses if present]\r\n- Roles/titles: [Job titles or positions mentioned]\r\n\r\nSlide 5: Action Items\r\n- Tasks mentioned: [Actual tasks or actions stated in document]\r\n- Deadlines: [Actual due dates or timeframes found]\r\n- Responsibilities: [Who is responsible for what, if stated]\r\n- Requirements: [Specific requirements listed]\r\n\r\nSlide 6: Business Information\r\n- Purpose/objectives: [Actual business purpose stated]\r\n- Processes: [Business processes described in document]\r\n- Policies: [Any policies or procedures mentioned]\r\n- Strategic points: [Business strategy elements found]\r\n\r\nSlide 7: Technical Content\r\n- Specifications: [Actual technical specs if present]\r\n- Systems: [Technology or systems mentioned]\r\n- Procedures: [Technical procedures described]\r\n- Standards: [Quality or technical standards listed]\r\n\r\nSlide 8: Legal/Compliance\r\n- Legal terms: [Legal language or requirements found]\r\n- Regulations: [Regulatory requirements mentioned]\r\n- Agreements: [Contract terms or agreements stated]\r\n- Compliance items: [Compliance requirements listed]\r\n\r\nSlide 9: Financial Information\r\n- Budget items: [Actual budget lines or financial data]\r\n- Costs: [Specific cost information found]\r\n- Revenue: [Revenue figures if mentioned]\r\n- Financial terms: [Payment terms, financial conditions]\r\n\r\nSlide 10: Implementation & Next Steps\r\n- Next actions: [Actual next steps stated in document]\r\n- Timeline: [Specific timeline or schedule found]\r\n- Follow-up: [Follow-up actions mentioned]\r\n- Contacts: [Who to contact for next steps]\r\n\r\nCRITICAL RULE: Use ONLY content actually extracted from the document. If no relevant content exists for a slide, write \"No specific [topic] content found in this document\" instead of creating generic placeholder text.`;\n        // Try Gemini APIs first for image analysis\n        const imageBuffer = Buffer.from(bytes);\n        const geminiResponse = await _lib_api_manager__WEBPACK_IMPORTED_MODULE_1__.apiManager.analyzeImageWithGemini(imageBuffer, file.type, prompt);\n        if (geminiResponse.success) {\n            // Get comprehensive research insights from Perplexity based on extracted content\n            let perplexityInsights = null;\n            try {\n                // Extract key themes, text content, and data from Gemini analysis\n                const fullContent = geminiResponse.data;\n                const extractedText = fullContent.match(/EXTRACTED TEXT CONTENT:([\\s\\S]*?)VISUAL ELEMENTS:/)?.[1] || \"\";\n                const contentAnalysis = fullContent.substring(0, 1000);\n                const valueEnhancementQuery = `Based on this extracted document content: \"${contentAnalysis}\"\r\n\r\n        ${extractedText ? `EXACT EXTRACTED TEXT: \"${extractedText.trim()}\"` : \"\"}\r\n\r\n        Provide PRACTICAL, VALUE-ADDING insights that make this content MORE USEFUL:\r\n\r\n        1. CONTENT VALIDATION & ENHANCEMENT:\r\n           - Verify accuracy of key facts, figures, and statements\r\n           - Provide missing context or background information\r\n           - Identify industry standards or benchmarks mentioned\r\n           - Explain technical terms or specialized language\r\n\r\n        2. BUSINESS VALUE AMPLIFICATION:\r\n           - How to maximize business value from this content\r\n           - Revenue opportunities or cost-saving potential\r\n           - Competitive advantages or strategic positioning\r\n           - Market timing and implementation windows\r\n\r\n        3. RISK ASSESSMENT & MITIGATION:\r\n           - Potential risks or challenges in the content\r\n           - Regulatory or compliance considerations\r\n           - Financial or operational risks identified\r\n           - Mitigation strategies and backup plans\r\n\r\n        4. IMPLEMENTATION SUCCESS FACTORS:\r\n           - Critical success factors for any plans mentioned\r\n           - Common pitfalls and how to avoid them\r\n           - Resource requirements and budgeting considerations\r\n           - Timeline optimization and milestone planning\r\n\r\n        5. STAKEHOLDER & DECISION SUPPORT:\r\n           - Key stakeholders who should review this content\r\n           - Decision criteria and evaluation frameworks\r\n           - Approval processes and sign-off requirements\r\n           - Communication strategies and messaging\r\n\r\n        6. DATA-DRIVEN INSIGHTS:\r\n           - Industry benchmarks for any metrics mentioned\r\n           - Comparative analysis with market standards\r\n           - ROI calculations and financial projections\r\n           - Performance indicators and success metrics\r\n\r\n        7. ACTIONABLE NEXT STEPS:\r\n           - Immediate actions to take based on this content\r\n           - 30-60-90 day implementation roadmap\r\n           - Key questions to ask stakeholders\r\n           - Required resources and team assignments\r\n\r\n        8. STRATEGIC OPPORTUNITIES:\r\n           - How this content connects to broader business strategy\r\n           - Partnership or collaboration opportunities\r\n           - Innovation or improvement possibilities\r\n           - Long-term strategic implications\r\n\r\n        Focus on making the extracted content IMMEDIATELY ACTIONABLE and STRATEGICALLY VALUABLE for business decisions.`;\n                const insightsResponse = await _lib_api_manager__WEBPACK_IMPORTED_MODULE_1__.apiManager.getInsightsWithPerplexity(valueEnhancementQuery);\n                if (insightsResponse.success) {\n                    perplexityInsights = insightsResponse.data;\n                }\n            } catch (error) {\n                console.log(\"Perplexity insights unavailable:\", error);\n            }\n            // Extract key components and analyze actual content quality\n            const fullContent = geminiResponse.data;\n            const extractedText = fullContent.match(/EXTRACTED TEXT CONTENT:([\\s\\S]*?)VISUAL ELEMENTS:/)?.[1]?.trim() || null;\n            const documentType = fullContent.match(/DOCUMENT TYPE:\\s*(.+)/)?.[1]?.trim() || \"Image Analysis\";\n            // Count actual slides generated\n            const slideMatches = fullContent.match(/Slide \\d+:/g) || [];\n            const actualSlideCount = slideMatches.length;\n            // Assess content quality based on actual extraction\n            const wordCount = extractedText ? extractedText.split(/\\s+/).length : 0;\n            const hasNumbers = extractedText ? (extractedText.match(/\\d+/g) || []).length : 0;\n            const hasNames = extractedText ? (extractedText.match(/[A-Z][a-z]+\\s+[A-Z][a-z]+/g) || []).length : 0;\n            const hasDates = extractedText ? (extractedText.match(/\\d{1,2}\\/\\d{1,2}\\/\\d{4}|\\d{4}-\\d{2}-\\d{2}|\\w+\\s+\\d{1,2},?\\s+\\d{4}/g) || []).length : 0;\n            // Calculate content quality score\n            let qualityScore = 0;\n            let qualityLevel = \"Basic\";\n            let comprehensivenessLevel = \"Standard\";\n            // Check for placeholder content and penalize it\n            const hasPlaceholders = fullContent.includes(\"(Not applicable)\") || fullContent.includes(\"No specific\") || fullContent.includes(\"Not available\") || fullContent.includes(\"Generic content\") || fullContent.includes(\"Standard template\");\n            if (extractedText && extractedText.length > 100) qualityScore += 20; // Has substantial text\n            if (wordCount > 50) qualityScore += 20; // Good word count\n            if (hasNumbers > 0) qualityScore += 15; // Contains data\n            if (hasNames > 0) qualityScore += 15; // Contains names/entities\n            if (hasDates > 0) qualityScore += 10; // Contains dates\n            if (actualSlideCount >= 8) qualityScore += 10; // Complete slide set\n            if (fullContent.includes(\"Action Items\") || fullContent.includes(\"Next Steps\")) qualityScore += 10; // Actionable content\n            // Penalize placeholder content\n            if (hasPlaceholders) qualityScore -= 25; // Reduce score for generic content\n            // Boost score for actual extracted content\n            if (extractedText && !hasPlaceholders && extractedText.length > 200) qualityScore += 15; // Bonus for real content\n            if (qualityScore >= 90) {\n                qualityLevel = \"Exceptional\";\n                comprehensivenessLevel = \"Maximum Value\";\n            } else if (qualityScore >= 75) {\n                qualityLevel = \"High Professional\";\n                comprehensivenessLevel = \"Business-Ready\";\n            } else if (qualityScore >= 60) {\n                qualityLevel = \"Professional\";\n                comprehensivenessLevel = \"Good\";\n            } else if (qualityScore >= 40) {\n                qualityLevel = \"Standard\";\n                comprehensivenessLevel = \"Adequate\";\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                content: geminiResponse.data,\n                fileName: file.name,\n                fileSize: file.size,\n                mimeType: file.type,\n                uploadDate: new Date().toISOString(),\n                documentType: documentType,\n                extractedText: extractedText,\n                hasTextContent: !!extractedText && extractedText.length > 10,\n                contentQuality: {\n                    score: qualityScore,\n                    level: qualityLevel,\n                    wordCount: wordCount,\n                    dataPoints: hasNumbers,\n                    entities: hasNames,\n                    dates: hasDates\n                },\n                imageMetadata: {\n                    dimensions: \"AI Analyzed\",\n                    format: file.type.split(\"/\")[1]?.toUpperCase() || \"UNKNOWN\",\n                    quality: \"High Resolution\",\n                    analysis: \"Complete with Text Extraction\"\n                },\n                apiUsed: geminiResponse.apiUsed,\n                insights: perplexityInsights,\n                perplexityResearch: perplexityInsights ? {\n                    hasResearch: true,\n                    researchQuality: \"Business Value Enhancement Grade\",\n                    insightCount: perplexityInsights.split(\"\\n\").filter((line)=>line.trim().length > 0).length,\n                    categories: [\n                        \"Business Value\",\n                        \"Risk Assessment\",\n                        \"Implementation Guide\",\n                        \"Strategic Opportunities\",\n                        \"Stakeholder Support\",\n                        \"Action Planning\"\n                    ],\n                    hasFollowUpQuestions: perplexityInsights.includes(\"questions\") || perplexityInsights.includes(\"NEXT STEPS\"),\n                    hasMarketInsights: perplexityInsights.includes(\"business\") || perplexityInsights.includes(\"strategic\")\n                } : null,\n                analysisMetrics: {\n                    comprehensiveness: comprehensivenessLevel,\n                    detailLevel: `${qualityLevel} Grade`,\n                    slideCount: actualSlideCount,\n                    contentDepth: extractedText ? `${wordCount} words extracted` : \"Visual Analysis Only\",\n                    textExtractionQuality: extractedText ? `${hasNumbers} data points, ${hasNames} entities` : \"No Text Detected\",\n                    qualityScore: qualityScore\n                },\n                message: hasPlaceholders ? \"Slides generated - some content may be generic due to limited document text extraction\" : \"High-quality slides created with actual extracted content and business insights\"\n            });\n            if (timeoutId) clearTimeout(timeoutId);\n        }\n        // Fallback to realistic mock content that simulates actual document analysis\n        if (timeoutId) clearTimeout(timeoutId);\n        const mockContent = `\r\nDOCUMENT TYPE: Image Document Analysis (Offline Mode)\r\n\r\nEXTRACTED TEXT CONTENT:\r\n⚠️ OFFLINE MODE: AI services exceeded quota limits. Generating realistic demo content based on file: \"${file.name}\"\r\n\r\nFile Analysis Summary:\r\n- Filename: ${file.name}\r\n- File Size: ${(file.size / 1024 / 1024).toFixed(2)} MB\r\n- Format: ${file.type.split(\"/\")[1]?.toUpperCase()}\r\n- Upload Time: ${new Date().toLocaleString()}\r\n\r\nVISUAL ELEMENTS:\r\nDocument appears to contain visual content requiring AI analysis. Due to API quota limitations, showing demo analysis structure.\r\n\r\nREALISTIC DEMO SLIDES:\r\n\r\nSlide 1: Document Overview\r\n- Title: Analysis of ${file.name}\r\n- Document Type: ${file.type.includes(\"image\") ? \"Image Document\" : \"Digital File\"}\r\n- Size: ${(file.size / 1024 / 1024).toFixed(2)} MB\r\n- Processing Date: ${new Date().toLocaleDateString()}\r\n\r\nSlide 2: File Information\r\n- Original Filename: ${file.name}\r\n- File Format: ${file.type}\r\n- Upload Status: Successfully received\r\n- Processing Mode: Offline demonstration\r\n\r\nSlide 3: Content Analysis Capability\r\n- Text Recognition: OCR technology available\r\n- Visual Element Detection: Chart and table analysis\r\n- Data Extraction: Numbers, dates, names identification\r\n- Business Insights: Strategic recommendations generation\r\n\r\nSlide 4: Expected Output Quality\r\n- Text Accuracy: High-precision OCR results\r\n- Data Points: Structured information extraction\r\n- Business Value: Actionable recommendations\r\n- Time Efficiency: Rapid processing capability\r\n\r\nSlide 5: API Quota Status\r\n- Current Status: Free tier quota exceeded\r\n- Daily Limit: Reached maximum requests\r\n- Reset Time: Quotas reset daily\r\n- Solution: Upgrade to paid tier for unlimited access\r\n\r\nSlide 6: Next Steps for Full Functionality\r\n- API Configuration: Set up paid Google Cloud account\r\n- Quota Management: Monitor usage and limits\r\n- Alternative: Try again after quota reset\r\n- Support: Contact for enterprise API access\r\n\r\nSlide 7: Demo Content Notice\r\n- This Content: Generated for demonstration purposes\r\n- Real Analysis: Requires active AI services\r\n- Quality Difference: Actual results much more detailed\r\n- Test Again: After resolving quota limitations\r\n\r\nSlide 8: Technical Requirements\r\n- Internet Connection: Required for AI processing\r\n- API Keys: Valid Google Gemini credentials needed\r\n- Billing: Paid account for sustained usage\r\n- Models: Access to latest AI vision models\r\n    `;\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            content: mockContent,\n            fileName: file.name,\n            fileSize: file.size,\n            mimeType: file.type,\n            uploadDate: new Date().toISOString(),\n            documentType: \"AI Services Offline\",\n            extractedText: null,\n            hasTextContent: false,\n            contentQuality: {\n                score: 45,\n                level: \"Demo Mode - API Quota Exceeded\",\n                wordCount: 150,\n                dataPoints: 5,\n                entities: 3,\n                dates: 1 // Simulated dates\n            },\n            imageMetadata: {\n                dimensions: \"Analysis unavailable\",\n                format: file.type.split(\"/\")[1]?.toUpperCase() || \"UNKNOWN\",\n                quality: \"AI Services Offline\",\n                analysis: \"Requires valid API configuration\"\n            },\n            analysisMetrics: {\n                comprehensiveness: \"Demo Mode - Limited Analysis\",\n                detailLevel: \"API Quota Exceeded - Simulated Results\",\n                slideCount: 8,\n                contentDepth: `Demo analysis of ${(file.size / 1024 / 1024).toFixed(2)}MB file`,\n                textExtractionQuality: \"Quota exceeded - realistic demo content generated\",\n                qualityScore: 45\n            },\n            mockData: true,\n            apiFailure: true,\n            message: \"⚠️ Google Gemini API quota exceeded. Demo content generated. Upgrade to paid tier or try again tomorrow for full AI analysis.\",\n            quotaExceeded: true,\n            instructions: {\n                issue: \"Google Gemini API free tier quota exceeded\",\n                solution: \"Upgrade to paid Google Cloud account or wait for quota reset\",\n                resetTime: \"Daily quotas reset at midnight Pacific Time\",\n                upgradeUrl: \"https://cloud.google.com/vertex-ai/pricing\"\n            }\n        });\n        return addCorsHeaders(response);\n    } catch (error) {\n        console.error(\"API error:\", error);\n        // Handle timeout errors specifically\n        if (error.name === \"AbortError\" || error.message.includes(\"timeout\")) {\n            const timeoutResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Request timeout - file too large or processing took too long. Please try a smaller file.\"\n            }, {\n                status: 408\n            });\n            return addCorsHeaders(timeoutResponse);\n        }\n        const errorResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to process image\"\n        }, {\n            status: 500\n        });\n        return addCorsHeaders(errorResponse);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/gemini-vision/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api-manager.ts":
/*!****************************!*\
  !*** ./lib/api-manager.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiManager: () => (/* binding */ apiManager)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nclass APIManager {\n    constructor(){\n        this.apis = [];\n        this.currentGeminiIndex = 0;\n        this.MAX_ERROR_COUNT = 3;\n        this.ERROR_RESET_TIME = 5 * 60 * 1000 // 5 minutes\n        ;\n        this.geminiClients = new Map() // Cache AI clients\n        ;\n        this.lastHealthCheck = 0;\n        this.HEALTH_CHECK_INTERVAL = 60000 // 1 minute\n        ;\n        this.initializeAPIs();\n    }\n    initializeAPIs() {\n        // Initialize Gemini APIs\n        const geminiKeys = [\n            process.env.GEMINI_API_KEY_1,\n            process.env.GEMINI_API_KEY_2,\n            process.env.GEMINI_API_KEY_3\n        ].filter(Boolean);\n        geminiKeys.forEach((key, index)=>{\n            if (key) {\n                this.apis.push({\n                    id: `gemini_${index + 1}`,\n                    type: \"gemini\",\n                    key,\n                    maxRetries: 2,\n                    timeout: 30000,\n                    isActive: true,\n                    errorCount: 0\n                });\n            }\n        });\n        // Initialize Perplexity API\n        if (process.env.PERPLEXITY_API_KEY) {\n            this.apis.push({\n                id: \"perplexity_1\",\n                type: \"perplexity\",\n                key: process.env.PERPLEXITY_API_KEY,\n                baseUrl: \"https://api.perplexity.ai\",\n                maxRetries: 2,\n                timeout: 30000,\n                isActive: true,\n                errorCount: 0\n            });\n        }\n        console.log(`Initialized ${this.apis.length} APIs:`, this.apis.map((api)=>`${api.id} (${api.type})`));\n    }\n    resetErrorCount(api) {\n        const now = new Date();\n        if (api.lastError && now.getTime() - api.lastError.getTime() > this.ERROR_RESET_TIME) {\n            api.errorCount = 0;\n            api.isActive = true;\n            api.lastError = undefined;\n        }\n    }\n    markAPIError(api, error) {\n        api.errorCount++;\n        api.lastError = new Date();\n        if (api.errorCount >= this.MAX_ERROR_COUNT) {\n            api.isActive = false;\n            console.warn(`API ${api.id} temporarily disabled due to errors:`, error);\n        }\n    }\n    getAvailableGeminiAPIs() {\n        return this.apis.filter((api)=>api.type === \"gemini\").map((api)=>{\n            this.resetErrorCount(api);\n            return api;\n        }).filter((api)=>api.isActive);\n    }\n    getAvailablePerplexityAPIs() {\n        return this.apis.filter((api)=>api.type === \"perplexity\").map((api)=>{\n            this.resetErrorCount(api);\n            return api;\n        }).filter((api)=>api.isActive);\n    }\n    async analyzeImageWithGemini(imageBuffer, mimeType, prompt) {\n        const availableAPIs = this.getAvailableGeminiAPIs();\n        if (availableAPIs.length === 0) {\n            return {\n                success: false,\n                error: \"No available Gemini APIs. All APIs are temporarily disabled.\"\n            };\n        }\n        // Round-robin through available APIs\n        for(let attempt = 0; attempt < availableAPIs.length; attempt++){\n            const apiIndex = (this.currentGeminiIndex + attempt) % availableAPIs.length;\n            const api = availableAPIs[apiIndex];\n            try {\n                console.log(`Attempting image analysis with ${api.id}...`);\n                const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(api.key);\n                // Use the basic flash model that should work\n                const model = genAI.getGenerativeModel({\n                    model: \"models/gemini-2.0-flash\",\n                    generationConfig: {\n                        maxOutputTokens: 4096\n                    }\n                });\n                const imagePart = {\n                    inlineData: {\n                        data: imageBuffer.toString(\"base64\"),\n                        mimeType: mimeType\n                    }\n                };\n                const result = await Promise.race([\n                    model.generateContent([\n                        prompt,\n                        imagePart\n                    ]),\n                    new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Request timeout\")), api.timeout))\n                ]);\n                const response = await result.response;\n                const text = response.text();\n                // Update current index for next request\n                this.currentGeminiIndex = (apiIndex + 1) % availableAPIs.length;\n                return {\n                    success: true,\n                    data: text,\n                    apiUsed: api.id\n                };\n            } catch (error) {\n                console.error(`Error with ${api.id}:`, error.message);\n                // Check for rate limit errors\n                if (error.message?.includes(\"quota\") || error.message?.includes(\"limit\") || error.status === 429) {\n                    api.rateLimitReset = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n                    this.markAPIError(api, `Rate limit: ${error.message}`);\n                } else {\n                    this.markAPIError(api, error.message);\n                }\n                // If this is the last attempt, continue to try other APIs\n                if (attempt === availableAPIs.length - 1) {\n                    return {\n                        success: false,\n                        error: `All Gemini APIs failed. Last error: ${error.message}`\n                    };\n                }\n            }\n        }\n        return {\n            success: false,\n            error: \"Unexpected error in image analysis\"\n        };\n    }\n    async getInsightsWithPerplexity(query) {\n        const availableAPIs = this.getAvailablePerplexityAPIs();\n        if (availableAPIs.length === 0) {\n            return {\n                success: false,\n                error: \"No available Perplexity APIs\"\n            };\n        }\n        const api = availableAPIs[0]; // Use first available Perplexity API\n        try {\n            console.log(`Getting insights with ${api.id}...`);\n            const response = await Promise.race([\n                fetch(`${api.baseUrl}/chat/completions`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Authorization\": `Bearer ${api.key}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        model: \"llama-3.1-sonar-large-128k-online\",\n                        messages: [\n                            {\n                                role: \"system\",\n                                content: \"You are a helpful research assistant. Provide detailed insights and analysis about the given topic.\"\n                            },\n                            {\n                                role: \"user\",\n                                content: query\n                            }\n                        ],\n                        max_tokens: 2000,\n                        temperature: 0.2,\n                        top_p: 0.9\n                    })\n                }),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Request timeout\")), api.timeout))\n            ]);\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.choices[0]?.message?.content || \"No insights generated\",\n                apiUsed: api.id\n            };\n        } catch (error) {\n            console.error(`Error with ${api.id}:`, error.message);\n            if (error.message?.includes(\"quota\") || error.message?.includes(\"limit\") || error.status === 429) {\n                api.rateLimitReset = new Date(Date.now() + 60 * 60 * 1000);\n                this.markAPIError(api, `Rate limit: ${error.message}`);\n            } else {\n                this.markAPIError(api, error.message);\n            }\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    getAPIStatus() {\n        return this.apis.map((api)=>({\n                id: api.id,\n                type: api.type,\n                isActive: api.isActive,\n                errorCount: api.errorCount,\n                lastError: api.lastError?.toString(),\n                lastErrorTime: api.lastError,\n                lastSuccessTime: undefined\n            }));\n    }\n    // Method to manually reset an API\n    resetAPI(apiId) {\n        const api = this.apis.find((a)=>a.id === apiId);\n        if (api) {\n            api.errorCount = 0;\n            api.isActive = true;\n            api.lastError = undefined;\n            api.rateLimitReset = undefined;\n            console.log(`Manually reset API: ${apiId}`);\n        }\n    }\n}\n// Singleton instance\nconst apiManager = new APIManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUU7UUFDdEIsTUFBTWxFLE1BQU0sSUFBSSxDQUFDakMsSUFBSSxDQUFDb0csSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFaEYsRUFBRSxLQUFLOEU7UUFDekMsSUFBSWxFLEtBQUs7WUFDUEEsSUFBSVAsVUFBVSxHQUFHO1lBQ2pCTyxJQUFJUixRQUFRLEdBQUc7WUFDZlEsSUFBSUksU0FBUyxHQUFHRTtZQUNoQk4sSUFBSTJDLGNBQWMsR0FBR3JDO1lBQ3JCVixRQUFRQyxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsRUFBRXFFLE1BQU0sQ0FBQztRQUM1QztJQUNGO0FBQ0Y7QUFFQSxxQkFBcUI7QUFDZCxNQUFNRyxhQUFhLElBQUl4RyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25hcDJzbGlkZXMtcHJvLy4vbGliL2FwaS1tYW5hZ2VyLnRzPzc5NDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcclxuXHJcbmludGVyZmFjZSBBUElDb25maWcge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdHlwZTogJ2dlbWluaScgfCAncGVycGxleGl0eSc7XHJcbiAga2V5OiBzdHJpbmc7XHJcbiAgYmFzZVVybD86IHN0cmluZztcclxuICBtYXhSZXRyaWVzOiBudW1iZXI7XHJcbiAgdGltZW91dDogbnVtYmVyO1xyXG4gIGlzQWN0aXZlOiBib29sZWFuO1xyXG4gIGVycm9yQ291bnQ6IG51bWJlcjtcclxuICBsYXN0RXJyb3I/OiBEYXRlO1xyXG4gIHJhdGVMaW1pdFJlc2V0PzogRGF0ZTtcclxufVxyXG5cclxuaW50ZXJmYWNlIEFQSVJlc3BvbnNlIHtcclxuICBzdWNjZXNzOiBib29sZWFuO1xyXG4gIGRhdGE/OiBhbnk7XHJcbiAgZXJyb3I/OiBzdHJpbmc7XHJcbiAgYXBpVXNlZD86IHN0cmluZztcclxuICByZXRyeUFmdGVyPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFQSVN0YXR1cyB7XHJcbiAgaWQ6IHN0cmluZztcclxuICB0eXBlOiAnZ2VtaW5pJyB8ICdwZXJwbGV4aXR5JztcclxuICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICBlcnJvckNvdW50OiBudW1iZXI7XHJcbiAgbGFzdEVycm9yPzogc3RyaW5nO1xyXG4gIGxhc3RFcnJvclRpbWU/OiBEYXRlO1xyXG4gIGxhc3RTdWNjZXNzVGltZT86IERhdGU7XHJcbn1cclxuXHJcbmNsYXNzIEFQSU1hbmFnZXIge1xyXG4gIHByaXZhdGUgYXBpczogQVBJQ29uZmlnW10gPSBbXTtcclxuICBwcml2YXRlIGN1cnJlbnRHZW1pbmlJbmRleCA9IDA7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBNQVhfRVJST1JfQ09VTlQgPSAzO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgRVJST1JfUkVTRVRfVElNRSA9IDUgKiA2MCAqIDEwMDA7IC8vIDUgbWludXRlc1xyXG4gIHByaXZhdGUgZ2VtaW5pQ2xpZW50czogTWFwPHN0cmluZywgR29vZ2xlR2VuZXJhdGl2ZUFJPiA9IG5ldyBNYXAoKTsgLy8gQ2FjaGUgQUkgY2xpZW50c1xyXG4gIHByaXZhdGUgbGFzdEhlYWx0aENoZWNrID0gMDtcclxuICBwcml2YXRlIHJlYWRvbmx5IEhFQUxUSF9DSEVDS19JTlRFUlZBTCA9IDYwMDAwOyAvLyAxIG1pbnV0ZVxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUFQSXMoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUFQSXMoKSB7XHJcbiAgICAvLyBJbml0aWFsaXplIEdlbWluaSBBUElzXHJcbiAgICBjb25zdCBnZW1pbmlLZXlzID0gW1xyXG4gICAgICBwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWV8xLFxyXG4gICAgICBwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWV8yLFxyXG4gICAgICBwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWV8zLFxyXG4gICAgXS5maWx0ZXIoQm9vbGVhbik7XHJcblxyXG4gICAgZ2VtaW5pS2V5cy5mb3JFYWNoKChrZXksIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChrZXkpIHtcclxuICAgICAgICB0aGlzLmFwaXMucHVzaCh7XHJcbiAgICAgICAgICBpZDogYGdlbWluaV8ke2luZGV4ICsgMX1gLFxyXG4gICAgICAgICAgdHlwZTogJ2dlbWluaScsXHJcbiAgICAgICAgICBrZXksXHJcbiAgICAgICAgICBtYXhSZXRyaWVzOiAyLFxyXG4gICAgICAgICAgdGltZW91dDogMzAwMDAsXHJcbiAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgIGVycm9yQ291bnQ6IDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgUGVycGxleGl0eSBBUElcclxuICAgIGlmIChwcm9jZXNzLmVudi5QRVJQTEVYSVRZX0FQSV9LRVkpIHtcclxuICAgICAgdGhpcy5hcGlzLnB1c2goe1xyXG4gICAgICAgIGlkOiAncGVycGxleGl0eV8xJyxcclxuICAgICAgICB0eXBlOiAncGVycGxleGl0eScsXHJcbiAgICAgICAga2V5OiBwcm9jZXNzLmVudi5QRVJQTEVYSVRZX0FQSV9LRVksXHJcbiAgICAgICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLnBlcnBsZXhpdHkuYWknLFxyXG4gICAgICAgIG1heFJldHJpZXM6IDIsXHJcbiAgICAgICAgdGltZW91dDogMzAwMDAsXHJcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXHJcbiAgICAgICAgZXJyb3JDb3VudDogMCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coYEluaXRpYWxpemVkICR7dGhpcy5hcGlzLmxlbmd0aH0gQVBJczpgLCBcclxuICAgICAgdGhpcy5hcGlzLm1hcChhcGkgPT4gYCR7YXBpLmlkfSAoJHthcGkudHlwZX0pYCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXNldEVycm9yQ291bnQoYXBpOiBBUElDb25maWcpIHtcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICBpZiAoYXBpLmxhc3RFcnJvciAmJiAobm93LmdldFRpbWUoKSAtIGFwaS5sYXN0RXJyb3IuZ2V0VGltZSgpKSA+IHRoaXMuRVJST1JfUkVTRVRfVElNRSkge1xyXG4gICAgICBhcGkuZXJyb3JDb3VudCA9IDA7XHJcbiAgICAgIGFwaS5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgIGFwaS5sYXN0RXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hcmtBUElFcnJvcihhcGk6IEFQSUNvbmZpZywgZXJyb3I6IHN0cmluZykge1xyXG4gICAgYXBpLmVycm9yQ291bnQrKztcclxuICAgIGFwaS5sYXN0RXJyb3IgPSBuZXcgRGF0ZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoYXBpLmVycm9yQ291bnQgPj0gdGhpcy5NQVhfRVJST1JfQ09VTlQpIHtcclxuICAgICAgYXBpLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUud2FybihgQVBJICR7YXBpLmlkfSB0ZW1wb3JhcmlseSBkaXNhYmxlZCBkdWUgdG8gZXJyb3JzOmAsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0QXZhaWxhYmxlR2VtaW5pQVBJcygpOiBBUElDb25maWdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5hcGlzXHJcbiAgICAgIC5maWx0ZXIoYXBpID0+IGFwaS50eXBlID09PSAnZ2VtaW5pJylcclxuICAgICAgLm1hcChhcGkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVzZXRFcnJvckNvdW50KGFwaSk7XHJcbiAgICAgICAgcmV0dXJuIGFwaTtcclxuICAgICAgfSlcclxuICAgICAgLmZpbHRlcihhcGkgPT4gYXBpLmlzQWN0aXZlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0QXZhaWxhYmxlUGVycGxleGl0eUFQSXMoKTogQVBJQ29uZmlnW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuYXBpc1xyXG4gICAgICAuZmlsdGVyKGFwaSA9PiBhcGkudHlwZSA9PT0gJ3BlcnBsZXhpdHknKVxyXG4gICAgICAubWFwKGFwaSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZXNldEVycm9yQ291bnQoYXBpKTtcclxuICAgICAgICByZXR1cm4gYXBpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmlsdGVyKGFwaSA9PiBhcGkuaXNBY3RpdmUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgYW5hbHl6ZUltYWdlV2l0aEdlbWluaShpbWFnZUJ1ZmZlcjogQnVmZmVyLCBtaW1lVHlwZTogc3RyaW5nLCBwcm9tcHQ6IHN0cmluZyk6IFByb21pc2U8QVBJUmVzcG9uc2U+IHtcclxuICAgIGNvbnN0IGF2YWlsYWJsZUFQSXMgPSB0aGlzLmdldEF2YWlsYWJsZUdlbWluaUFQSXMoKTtcclxuICAgIFxyXG4gICAgaWYgKGF2YWlsYWJsZUFQSXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6ICdObyBhdmFpbGFibGUgR2VtaW5pIEFQSXMuIEFsbCBBUElzIGFyZSB0ZW1wb3JhcmlseSBkaXNhYmxlZC4nLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJvdW5kLXJvYmluIHRocm91Z2ggYXZhaWxhYmxlIEFQSXNcclxuICAgIGZvciAobGV0IGF0dGVtcHQgPSAwOyBhdHRlbXB0IDwgYXZhaWxhYmxlQVBJcy5sZW5ndGg7IGF0dGVtcHQrKykge1xyXG4gICAgICBjb25zdCBhcGlJbmRleCA9ICh0aGlzLmN1cnJlbnRHZW1pbmlJbmRleCArIGF0dGVtcHQpICUgYXZhaWxhYmxlQVBJcy5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IGFwaSA9IGF2YWlsYWJsZUFQSXNbYXBpSW5kZXhdO1xyXG4gICAgICBcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgQXR0ZW1wdGluZyBpbWFnZSBhbmFseXNpcyB3aXRoICR7YXBpLmlkfS4uLmApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShhcGkua2V5KTtcclxuICAgICAgICAvLyBVc2UgdGhlIGJhc2ljIGZsYXNoIG1vZGVsIHRoYXQgc2hvdWxkIHdvcmtcclxuICAgICAgICBjb25zdCBtb2RlbCA9IGdlbkFJLmdldEdlbmVyYXRpdmVNb2RlbCh7IFxyXG4gICAgICAgICAgbW9kZWw6ICdtb2RlbHMvZ2VtaW5pLTIuMC1mbGFzaCcsXHJcbiAgICAgICAgICBnZW5lcmF0aW9uQ29uZmlnOiB7XHJcbiAgICAgICAgICAgIG1heE91dHB1dFRva2VuczogNDA5NixcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBpbWFnZVBhcnQgPSB7XHJcbiAgICAgICAgICBpbmxpbmVEYXRhOiB7XHJcbiAgICAgICAgICAgIGRhdGE6IGltYWdlQnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKSxcclxuICAgICAgICAgICAgbWltZVR5cGU6IG1pbWVUeXBlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgICAgbW9kZWwuZ2VuZXJhdGVDb250ZW50KFtwcm9tcHQsIGltYWdlUGFydF0pLFxyXG4gICAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignUmVxdWVzdCB0aW1lb3V0JykpLCBhcGkudGltZW91dClcclxuICAgICAgICAgICksXHJcbiAgICAgICAgXSkgYXMgYW55O1xyXG5cclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3VsdC5yZXNwb25zZTtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gcmVzcG9uc2UudGV4dCgpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgY3VycmVudCBpbmRleCBmb3IgbmV4dCByZXF1ZXN0XHJcbiAgICAgICAgdGhpcy5jdXJyZW50R2VtaW5pSW5kZXggPSAoYXBpSW5kZXggKyAxKSAlIGF2YWlsYWJsZUFQSXMubGVuZ3RoO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIGRhdGE6IHRleHQsXHJcbiAgICAgICAgICBhcGlVc2VkOiBhcGkuaWQsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciB3aXRoICR7YXBpLmlkfTpgLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVjayBmb3IgcmF0ZSBsaW1pdCBlcnJvcnNcclxuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ3F1b3RhJykgfHwgZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ2xpbWl0JykgfHwgZXJyb3Iuc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgICAgIGFwaS5yYXRlTGltaXRSZXNldCA9IG5ldyBEYXRlKERhdGUubm93KCkgKyA2MCAqIDYwICogMTAwMCk7IC8vIDEgaG91clxyXG4gICAgICAgICAgdGhpcy5tYXJrQVBJRXJyb3IoYXBpLCBgUmF0ZSBsaW1pdDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLm1hcmtBUElFcnJvcihhcGksIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgbGFzdCBhdHRlbXB0LCBjb250aW51ZSB0byB0cnkgb3RoZXIgQVBJc1xyXG4gICAgICAgIGlmIChhdHRlbXB0ID09PSBhdmFpbGFibGVBUElzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogYEFsbCBHZW1pbmkgQVBJcyBmYWlsZWQuIExhc3QgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgZXJyb3I6ICdVbmV4cGVjdGVkIGVycm9yIGluIGltYWdlIGFuYWx5c2lzJyxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRJbnNpZ2h0c1dpdGhQZXJwbGV4aXR5KHF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPEFQSVJlc3BvbnNlPiB7XHJcbiAgICBjb25zdCBhdmFpbGFibGVBUElzID0gdGhpcy5nZXRBdmFpbGFibGVQZXJwbGV4aXR5QVBJcygpO1xyXG4gICAgXHJcbiAgICBpZiAoYXZhaWxhYmxlQVBJcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ05vIGF2YWlsYWJsZSBQZXJwbGV4aXR5IEFQSXMnLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFwaSA9IGF2YWlsYWJsZUFQSXNbMF07IC8vIFVzZSBmaXJzdCBhdmFpbGFibGUgUGVycGxleGl0eSBBUElcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgR2V0dGluZyBpbnNpZ2h0cyB3aXRoICR7YXBpLmlkfS4uLmApO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgIGZldGNoKGAke2FwaS5iYXNlVXJsfS9jaGF0L2NvbXBsZXRpb25zYCwge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2FwaS5rZXl9YCxcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIG1vZGVsOiAnbGxhbWEtMy4xLXNvbmFyLWxhcmdlLTEyOGstb25saW5lJyxcclxuICAgICAgICAgICAgbWVzc2FnZXM6IFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdZb3UgYXJlIGEgaGVscGZ1bCByZXNlYXJjaCBhc3Npc3RhbnQuIFByb3ZpZGUgZGV0YWlsZWQgaW5zaWdodHMgYW5kIGFuYWx5c2lzIGFib3V0IHRoZSBnaXZlbiB0b3BpYy4nXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBxdWVyeVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgbWF4X3Rva2VuczogMjAwMCxcclxuICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuMixcclxuICAgICAgICAgICAgdG9wX3A6IDAuOSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIG5ldyBQcm9taXNlPG5ldmVyPigoXywgcmVqZWN0KSA9PiBcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignUmVxdWVzdCB0aW1lb3V0JykpLCBhcGkudGltZW91dClcclxuICAgICAgICApLFxyXG4gICAgICBdKTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgZGF0YTogZGF0YS5jaG9pY2VzWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8ICdObyBpbnNpZ2h0cyBnZW5lcmF0ZWQnLFxyXG4gICAgICAgIGFwaVVzZWQ6IGFwaS5pZCxcclxuICAgICAgfTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdpdGggJHthcGkuaWR9OmAsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdxdW90YScpIHx8IGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdsaW1pdCcpIHx8IGVycm9yLnN0YXR1cyA9PT0gNDI5KSB7XHJcbiAgICAgICAgYXBpLnJhdGVMaW1pdFJlc2V0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDYwICogNjAgKiAxMDAwKTtcclxuICAgICAgICB0aGlzLm1hcmtBUElFcnJvcihhcGksIGBSYXRlIGxpbWl0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5tYXJrQVBJRXJyb3IoYXBpLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEFQSVN0YXR1cygpOiBBUElTdGF0dXNbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5hcGlzLm1hcChhcGkgPT4gKHtcclxuICAgICAgaWQ6IGFwaS5pZCxcclxuICAgICAgdHlwZTogYXBpLnR5cGUsXHJcbiAgICAgIGlzQWN0aXZlOiBhcGkuaXNBY3RpdmUsXHJcbiAgICAgIGVycm9yQ291bnQ6IGFwaS5lcnJvckNvdW50LFxyXG4gICAgICBsYXN0RXJyb3I6IGFwaS5sYXN0RXJyb3I/LnRvU3RyaW5nKCksXHJcbiAgICAgIGxhc3RFcnJvclRpbWU6IGFwaS5sYXN0RXJyb3IsXHJcbiAgICAgIGxhc3RTdWNjZXNzVGltZTogdW5kZWZpbmVkLCAvLyBXZSdsbCBuZWVkIHRvIHRyYWNrIHRoaXMgc2VwYXJhdGVseVxyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgLy8gTWV0aG9kIHRvIG1hbnVhbGx5IHJlc2V0IGFuIEFQSVxyXG4gIHJlc2V0QVBJKGFwaUlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFwaSA9IHRoaXMuYXBpcy5maW5kKGEgPT4gYS5pZCA9PT0gYXBpSWQpO1xyXG4gICAgaWYgKGFwaSkge1xyXG4gICAgICBhcGkuZXJyb3JDb3VudCA9IDA7XHJcbiAgICAgIGFwaS5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgIGFwaS5sYXN0RXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGFwaS5yYXRlTGltaXRSZXNldCA9IHVuZGVmaW5lZDtcclxuICAgICAgY29uc29sZS5sb2coYE1hbnVhbGx5IHJlc2V0IEFQSTogJHthcGlJZH1gKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIFNpbmdsZXRvbiBpbnN0YW5jZVxyXG5leHBvcnQgY29uc3QgYXBpTWFuYWdlciA9IG5ldyBBUElNYW5hZ2VyKCk7XHJcbmV4cG9ydCB0eXBlIHsgQVBJUmVzcG9uc2UgfTsiXSwibmFtZXMiOlsiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiQVBJTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiYXBpcyIsImN1cnJlbnRHZW1pbmlJbmRleCIsIk1BWF9FUlJPUl9DT1VOVCIsIkVSUk9SX1JFU0VUX1RJTUUiLCJnZW1pbmlDbGllbnRzIiwiTWFwIiwibGFzdEhlYWx0aENoZWNrIiwiSEVBTFRIX0NIRUNLX0lOVEVSVkFMIiwiaW5pdGlhbGl6ZUFQSXMiLCJnZW1pbmlLZXlzIiwicHJvY2VzcyIsImVudiIsIkdFTUlOSV9BUElfS0VZXzEiLCJHRU1JTklfQVBJX0tFWV8yIiwiR0VNSU5JX0FQSV9LRVlfMyIsImZpbHRlciIsIkJvb2xlYW4iLCJmb3JFYWNoIiwia2V5IiwiaW5kZXgiLCJwdXNoIiwiaWQiLCJ0eXBlIiwibWF4UmV0cmllcyIsInRpbWVvdXQiLCJpc0FjdGl2ZSIsImVycm9yQ291bnQiLCJQRVJQTEVYSVRZX0FQSV9LRVkiLCJiYXNlVXJsIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsIm1hcCIsImFwaSIsInJlc2V0RXJyb3JDb3VudCIsIm5vdyIsIkRhdGUiLCJsYXN0RXJyb3IiLCJnZXRUaW1lIiwidW5kZWZpbmVkIiwibWFya0FQSUVycm9yIiwiZXJyb3IiLCJ3YXJuIiwiZ2V0QXZhaWxhYmxlR2VtaW5pQVBJcyIsImdldEF2YWlsYWJsZVBlcnBsZXhpdHlBUElzIiwiYW5hbHl6ZUltYWdlV2l0aEdlbWluaSIsImltYWdlQnVmZmVyIiwibWltZVR5cGUiLCJwcm9tcHQiLCJhdmFpbGFibGVBUElzIiwic3VjY2VzcyIsImF0dGVtcHQiLCJhcGlJbmRleCIsImdlbkFJIiwibW9kZWwiLCJnZXRHZW5lcmF0aXZlTW9kZWwiLCJnZW5lcmF0aW9uQ29uZmlnIiwibWF4T3V0cHV0VG9rZW5zIiwiaW1hZ2VQYXJ0IiwiaW5saW5lRGF0YSIsImRhdGEiLCJ0b1N0cmluZyIsInJlc3VsdCIsIlByb21pc2UiLCJyYWNlIiwiZ2VuZXJhdGVDb250ZW50IiwiXyIsInJlamVjdCIsInNldFRpbWVvdXQiLCJFcnJvciIsInJlc3BvbnNlIiwidGV4dCIsImFwaVVzZWQiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJzdGF0dXMiLCJyYXRlTGltaXRSZXNldCIsImdldEluc2lnaHRzV2l0aFBlcnBsZXhpdHkiLCJxdWVyeSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibWVzc2FnZXMiLCJyb2xlIiwiY29udGVudCIsIm1heF90b2tlbnMiLCJ0ZW1wZXJhdHVyZSIsInRvcF9wIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiIsImNob2ljZXMiLCJnZXRBUElTdGF0dXMiLCJsYXN0RXJyb3JUaW1lIiwibGFzdFN1Y2Nlc3NUaW1lIiwicmVzZXRBUEkiLCJhcGlJZCIsImZpbmQiLCJhIiwiYXBpTWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/api-manager.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgemini-vision%2Froute&page=%2Fapi%2Fgemini-vision%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgemini-vision%2Froute.ts&appDir=D%3A%5Csnap2slides%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csnap2slides&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();