import { NextRequest, NextResponse } from 'next/server';
import jsPDF from 'jspdf';

export async function POST(request: NextRequest) {
  try {
    const { slides, title } = await request.json();
    
    if (!slides || !Array.isArray(slides)) {
      return NextResponse.json({ error: 'No slides data provided' }, { status: 400 });
    }

    // Create PDF document
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    
    // Add title page
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.text(title || 'AI Generated Presentation', pageWidth / 2, 60, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated with Snap2Slides AI', pageWidth / 2, 80, { align: 'center' });
    pdf.text(`Created: ${new Date().toLocaleDateString()}`, pageWidth / 2, 90, { align: 'center' });

    // Add slides
    slides.forEach((slide: any, index: number) => {
      if (index > 0 || slides.length > 1) {
        pdf.addPage();
      }
      
      // Add slide number
      pdf.setFontSize(10);
      pdf.setTextColor(128, 128, 128);
      pdf.text(`Slide ${index + 1}`, margin, margin);
      
      // Add slide title
      pdf.setFontSize(18);
      pdf.setTextColor(0, 0, 0);
      pdf.setFont('helvetica', 'bold');
      const title = slide.title || `Slide ${index + 1}`;
      pdf.text(title, margin, margin + 20);
      
      // Add slide content
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      // Parse content and handle bullet points
      const content = slide.content || '';
      const lines = content.split('\n').filter((line: string) => line.trim());
      
      let yPosition = margin + 35;
      const lineHeight = 6;
      
      lines.forEach((line: string) => {
        const trimmedLine = line.trim();
        if (trimmedLine.startsWith('- ')) {
          // Handle bullet points
          const bulletText = trimmedLine.substring(2);
          const wrappedLines = pdf.splitTextToSize(`â€¢ ${bulletText}`, contentWidth - 10);
          
          wrappedLines.forEach((wrappedLine: string) => {
            if (yPosition > pageHeight - margin - 20) {
              pdf.addPage();
              yPosition = margin + 20;
              
              // Add slide number on new page
              pdf.setFontSize(10);
              pdf.setTextColor(128, 128, 128);
              pdf.text(`Slide ${index + 1} (continued)`, margin, margin);
              pdf.setFontSize(12);
              pdf.setTextColor(0, 0, 0);
              yPosition = margin + 20;
            }
            
            pdf.text(wrappedLine, margin + 5, yPosition);
            yPosition += lineHeight;
          });
        } else if (trimmedLine.length > 0) {
          // Handle regular text
          const wrappedLines = pdf.splitTextToSize(trimmedLine, contentWidth);
          
          wrappedLines.forEach((wrappedLine: string) => {
            if (yPosition > pageHeight - margin - 20) {
              pdf.addPage();
              yPosition = margin + 20;
              
              // Add slide number on new page
              pdf.setFontSize(10);
              pdf.setTextColor(128, 128, 128);
              pdf.text(`Slide ${index + 1} (continued)`, margin, margin);
              pdf.setFontSize(12);
              pdf.setTextColor(0, 0, 0);
              yPosition = margin + 20;
            }
            
            pdf.text(wrappedLine, margin, yPosition);
            yPosition += lineHeight;
          });
        }
        yPosition += 2; // Extra spacing between paragraphs
      });
    });

    // Add footer with metadata
    const pageCount = (pdf as any).getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text(`Generated by Snap2Slides AI - Page ${i} of ${pageCount}`, 
        pageWidth / 2, pageHeight - 10, { align: 'center' });
    }

    // Generate PDF buffer
    const pdfBuffer = Buffer.from(pdf.output('arraybuffer'));

    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${title?.replace(/[^a-z0-9]/gi, '_') || 'snap2slides-presentation'}.pdf"`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    });

  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
}