# Production Docker Compose configuration for Snap2Slides
version: '3.8'

services:
  # ===================
  # Main Application (Production)
  # ===================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - AUTH0_SECRET=${AUTH0_SECRET}
      - AUTH0_BASE_URL=${AUTH0_BASE_URL}
      - AUTH0_ISSUER_BASE_URL=${AUTH0_ISSUER_BASE_URL}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
    networks:
      - snap2slides-network
    depends_on:
      - mongodb
      - redis
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================
  # Load Balancer
  # ===================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - snap2slides-network
    depends_on:
      - app
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # ===================
  # MongoDB Database (Production)
  # ===================
  mongodb:
    image: mongo:7-jammy
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=snap2slides
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/init-mongo.prod.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - snap2slides-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    command: mongod --auth --bind_ip_all --replSet rs0

  # ===================
  # Redis (Production)
  # ===================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - snap2slides-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    command: redis-server /usr/local/etc/redis/redis.conf

  # ===================
  # Monitoring & Logging
  # ===================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - snap2slides-network
    restart: always
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - snap2slides-network
    depends_on:
      - prometheus
    restart: always
    profiles:
      - monitoring

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - snap2slides-network
    restart: always
    profiles:
      - logging

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - snap2slides-network
    depends_on:
      - loki
    restart: always
    profiles:
      - logging

# ===================
# Networks
# ===================
networks:
  snap2slides-network:
    driver: overlay
    attachable: true

# ===================
# Volumes
# ===================
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
